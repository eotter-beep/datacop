Sad:

“I just watched a heartbreaking movie, and now I feel down.”

“That film was so sad—I can’t stop thinking about it.”

“Wow, that movie really hit me in the feels. Ugh, I’m sad now.”

“Just saw a tearjerker… why am I like this?”



“The movie left me in tears. I feel a heavy sadness lingering.”

“After watching that story, I feel a pang of sorrow I can’t shake.”



“That movie was so emotional—it made me reflect on my own life and now I feel melancholy.”

“Seeing that story unfold left me feeling a deep sadness I wasn’t expecting.”

Silly sad:

“I watched a sad movie and now I’m crying into my popcorn. Classic me.”

“That film was sad, and now I’m sadder… send help.”

"That film was so sad i could drink my tears!"

Angry:

"Erghhh! I'm so ANGRY about this!"

Hungry:

"Mmm.. I want something to eat!"

"Yummy! Food!"

Science:

“Water boils at 100°C at sea level.”
“Earth revolves around the Sun once every 365.25 days.”
“The human body has 206 bones.”
“Light travels at approximately 299,792 kilometers per second.”
“Gravity on Earth is 9.8 m/s².”
“Mount Everest is 8,848 meters tall.”
“Jupiter is the largest planet in the Solar System.”

History:

“The Great Wall of China is over 21,000 km long.”
“World War II ended in 1945.”
“Leonardo da Vinci painted the Mona Lisa in 1503.”
“The Roman Empire fell in 476 AD.”
“The American Declaration of Independence was signed in 1776.”
“Gutenberg invented the printing press around 1440.”

Geography:

“The Nile is the longest river in Africa.”
“The Sahara is the largest hot desert in the world.”
“Tokyo is the capital of Japan.”
“Mount Kilimanjaro is in Tanzania.”
“Lake Baikal is the deepest freshwater lake on Earth.”

Math:

“Pi (π) is approximately 3.14159.”
“The square root of 64 is 8.”
“The derivative of x² is 2x.”
“The integral of 1/x dx is ln|x| + C.”
“The area of a circle is π × r².”
“The perimeter of a rectangle is 2 × (length + width).”
“The sum of angles in a triangle is 180 degrees.”
“The Pythagorean theorem states a² + b² = c².”
“The factorial of 5 (5!) is 120.”
“The quadratic formula is x = [-b ± √(b² - 4ac)] / 2a.”
“The Fibonacci sequence starts with 0, 1, 1, 2, 3, 5, 8…”
“The probability of a fair coin landing heads is 0.5.”
“The area of a triangle is 0.5 × base × height.”
“The circumference of a circle is 2 × π × r.”
“A right angle measures 90 degrees.”

Geography:

“Mount Everest is the tallest mountain in the world at 8,848 meters.”
“The Nile is the longest river in Africa, approximately 6,650 km long.”
“Tokyo is the capital city of Japan.”
“The Sahara is the largest hot desert on Earth.”
“The Amazon Rainforest spans 5.5 million square kilometers.”
“Lake Baikal in Russia is the deepest freshwater lake, over 1,600 meters deep.”
“The Great Barrier Reef is located off the coast of Queensland, Australia.”
“Paris is the capital city of France.”
“The Mississippi River is the second-longest river in the United States.”
“The Andes is the longest continental mountain range in the world.”
“Mount Kilimanjaro is located in Tanzania.”
“The Dead Sea is the lowest point on Earth’s surface, at approximately -430 meters.”
“Greenland is the largest island in the world.”
“The Danube River flows through 10 countries in Europe.”
“The Kremlin is a historic fortified complex in Moscow, Russia.”

History:

“World War II ended in 1945.”
“The Declaration of Independence of the United States was signed in 1776.”
“Leonardo da Vinci painted the Mona Lisa in 1503.”
“The Roman Empire fell in 476 AD.”
“The French Revolution began in 1789.”
“Christopher Columbus arrived in the Americas in 1492.”
“The Great Fire of London occurred in 1666.”
“Nelson Mandela became South Africa’s first Black president in 1994.”
“The Berlin Wall fell in 1989.”
“The Industrial Revolution began in the late 18th century in Britain.”
“Gutenberg invented the printing press around 1440.”
“The American Civil War lasted from 1861 to 1865.”
“The Wright brothers made the first powered flight in 1903.”
“The Titanic sank in 1912.”
“The first moon landing occurred in 1969.”

Coding:

“Declare variables and constants; replace names and values with your own.”
“Use basic data types: integers, floats, strings, booleans; replace with your own values.”
“Perform arithmetic and logical operations; replace operands and operators with your own.”
“Use loops (for, while, do…while) for iteration; replace conditions and body with your own logic.”
“Apply conditional statements (if, else if, else, switch) for decision-making; replace conditions and actions with your own.”
“Define functions, methods, or procedures; replace name, parameters, and body with your logic.”
“Work with arrays, lists, or collections; replace with your own elements and operations.”
“Implement dictionaries, maps, or hash tables; replace keys and values with your own.”
“Use stacks, queues, and priority queues for LIFO/FIFO operations; replace operations with your own logic.”
“Manipulate strings and text using concatenation, slicing, and formatting; replace with your own content.”
“Apply object-oriented programming: classes, objects, inheritance, polymorphism, and encapsulation; replace names and methods with your own.”
“Handle exceptions and errors; replace exception types and recovery logic with your own.”
“Debug code using print statements, breakpoints, or logging; replace variables and messages with your own.”
“Write unit tests and integration tests; replace test cases, inputs, and expected outputs with your own.”
“Use recursion for problems that call themselves; replace base case and recursive step with your own logic.”
“Implement algorithms: sorting (bubble, merge, quick), searching (linear, binary), graph traversal (BFS, DFS); replace data and steps with your own.”
“Use dynamic programming and memoization to optimize recursive solutions; replace subproblems and formulas with your own.”
“Work with data structures: linked lists, trees (binary, AVL, B-trees), graphs (directed, undirected); replace nodes, edges, and traversal logic with your own.”
“Perform file input/output operations; replace file names and content with your own.”
“Query and manipulate databases (SQL/NoSQL); replace table names, columns, and conditions with your own.”
“Work with APIs and HTTP requests; replace endpoints, parameters, and payloads with your own.”
“Use concurrency, multithreading, or asynchronous programming; replace threads, tasks, and resources with your own logic.”
“Use regular expressions for pattern matching in strings; replace pattern and input with your own.”
“Apply version control (Git) for code management; replace commit messages, branches, and repository names with your own.”
“Use standard libraries and frameworks; replace functions, modules, and classes with your own usage.”
“Write clean, modular, and maintainable code; replace function names, class names, and comments with your own.”
“Document code with comments and documentation strings; replace explanations with your own descriptions.”
“Optimize code for time and space complexity; replace algorithms and data structures with your own improvements.”
“Implement security best practices: input validation, sanitization, encryption; replace values and methods with your own logic.”
“Use design patterns: singleton, observer, factory, strategy; replace class names and logic with your own.”
“Handle memory management and resources; replace allocation, deallocation, and references with your own logic.”
“Perform unit conversions, mathematical calculations, and numerical methods; replace formulas and inputs with your own.”
“Use testing frameworks and debugging tools; replace test cases and breakpoints with your own logic.”
“Apply software development lifecycle: planning, implementation, testing, deployment; replace steps with your own workflow.”
“Follow best coding practices: naming conventions, code readability, modularity, commenting; replace examples with your own style.”
"Conditionals
if condition then
  print("yes")
elseif condition then
  print("maybe")
else
  print("no")
end
Variables
local x = 2
two, four = 2, 4
Functions
function myFunction()
  return 1
end

function myFunctionWithArgs(a, b)
  -- ...
end

myFunction()

anonymousFunctions(function()
  -- ...
end)

-- Not exported in the module
local function myPrivateFunction()
end

-- Splats
function doAction(action, ...)
  print("Doing '"..action.."' to", ...)
  --> print("Doing 'write' to", "Shirley", "Abed")
end

doAction('write', "Shirley", "Abed")
Lookups
mytable = { x = 2, y = function() .. end }

-- The same:
mytable.x
mytable['x']

-- Syntactic sugar, these are equivalent:
mytable.y(mytable)
mytable:y()

mytable.y(mytable, a, b)
mytable:y(a, b)

function X:y(z) .. end
function X.y(self, z) .. end"
"Comments
-- comment
--[[ Multiline
     comment ]]
Invoking functions
print()
print("Hi")

-- You can omit parentheses if the argument is one string or table literal
print "Hello World"     <-->     print("Hello World")
dofile 'a.lua'          <-->     dofile ('a.lua')
print [[a multi-line    <-->     print([[a multi-line
 message]]                        message]])
f{x=10, y=20}           <-->     f({x=10, y=20})
type{}                  <-->     type({})
Tables / arrays
t = {}
t = { a = 1, b = 2 }
t.a = function() ... end

t = { ["hello"] = 200 }
t.hello

-- Remember, arrays are also tables
array = { "a", "b", "c", "d" }
print(array[2])       -- "b" (one-indexed)
print(#array)         -- 4 (length)
Loops
while condition do
end

for i = 1,5 do
end

for i = start,finish,delta do
end

for k,v in pairs(tab) do
end

repeat
until condition

-- Breaking out:
while x do
  if condition then break end
end"
"Register conventions#
General registers
Data registers: used for arithmetic, logical, and other operations
AX: the primary accumulator
BX: base register
CX: count register
DX: data register
Pointer registers
IP: Instruction Pointer
SP: Stack Pointer
BP: Base Pointer
Index registers
Control registers
Segment registers
General Purpose Registers#
Register	Usage	Description
rax/r0	accumulator	used for input/output and most arithmetic instructions
return value	holds function return value
syscall number	holds syscall number argument for syscall instruction
rbx/r3	base for index addressing	used as memory address base for indexed addressing
rcx/r1	counter for iteration	used for holding loop count in loops
this	storing this pointer in c++
rdx/r2	data	used in arithmetic and I/O operations
rdi/r7	destination index	used in stream operations e.g. stosb
rsi/r6	source index	used in stream operations e.g. lodsb
rsp/r4	Stack pointer	points to the top of the stack
rbp/r5	Frame pointer	points to the frame's base of stack
rn	Numbered (n=8..15)	
xmm0-15	128 bit floating point	
rip	instruction pointer	points to next instruction to execute
Control Registers#
Register	Description
CF	carry flag condition code register
ZF	zero flag condition code register
SF	sign flag condition code register
OF	overflow flag condition code register
Condition Code registers are single bit registers
implicitly set by arithmetic instructions
Ex: addl a,b where t is result value
CF set if unsigned overflow
ZF set if result is zero
SF set if result < 0
OF set if signed overflow (a>0 && b>0 && t<0) || (a<0 && b<0 && t>=0)
explicitly set by compare instruction
cmp a,b uses sets same flags as a-b instruction but without setting destination
Segment Registers#
Register	Description
CS	Code segment
SS	Stack segment
DS	Data segment
ES	Extra data segment
FS	Points to Thread Information Block (TIB)
GS	Extra data segment
Register Operands#
Operand	Description	
Immediate	numeric constant value	0x234 or 48
Register	general purpose register	rax
Memory	value stored at [reg + reg*scale + offset] address	scale is 1, 2, 4, or 8 only
value stored at [offset]	[2344]
value stored at [reg]	[rax+4] or C analogue of *(rax+4)
value stored at [reg + offset]	[rax+4] or C analogue of *(rax+4)
value stored at [reg + reg*scale]	[rax+4] or C analogue of *(rax+4)
value stored at [reg + reg*scale + offset ]	[rax+rbx*4] or C analogue of *(rbx*4+rax)
Register Data	Suffix	Definition instruction
8 bits (byte)	b	db
16 bits (word)	w	dw
32 bits (dword)	l	dd
64 bits (qword)	ll	ddq/do
float		dd
double		dq
extended precision		dt
NOTE: dst can never be an immediate
NOTE: src and dst can't both be memory operands
NOTE: some assemblers will legalize memory operands through simple algebraic transform
e.g. [rax*5] => [rax*4+rax]
Instructions#
Common Instructions#
For more common instructions, check out the Stanford CS107 list

Instruction	Arguments	Explanation
mov	src, dst	dst = src
add	src, dst	dst += src
sub	src, dst	dst -= src
cmp	a, b	b-a set flags
jmp	label	jump to label
je	label	jump if equal (ZF=1)
jne	label	jump not equal (ZF=0)
jg	label	jump > (ZF=0)
push	src	add to top of stack
pop	dst	remove top from stack
call	fn	push %rip, jmp to fn
ret		pop %rip
Conditionals#
cmp op1, op2 -> mimics sub op1, op2 but only changes the zero and carry flag for comparing

Prefixes

j~ x: jump to x if ~

cmov~ x, y: conditional mov x, y if ~
setc~ x: set x to 1 if ~, x is 8 bit reg
Many suffixes

a: above, >

ae: above or equal, >=
b: below, <
be: below or equal, <=
e: equal, =
ne: not equal, !=
Calling Convention#
Linux/OS X#
function parameters passed in registers
ints/pointers: rdi, rsi, rdx, rcx, r8, r9
floats/doubles: xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7
additional parameters get pushed on the stack in reverse order (must be cleaned up by caller)
return values are stored in rax/xmm0 for int/float
stack pointer rsp must be aligned to 16-byte boundary before invocation
call instruction pushes the return address (8 bytes) which unaligns rsp
must manually align by pushing or subtracting 8 from rsp
callee-saved registers: rbp, rbx, r12, r13, r14, r15
GAS

extern putchar
mov rdi,'H' ; function parameter: one char to print
call putchar
Windows#
function parameters passed in registers: rcx, rdx, r8, r9
must allocate 32 bytes of shadow stack space
callee-saved registers: rbx, rbp, rdi, rsi, rsp, r12, r13, r14, r15, xmm6..xmm15
GAS

sub rsp,32+8; parameter area, and stack alignment
extern putchar
mov rcx,'H' ; function parameter: one char to print
call putchar
add rsp,32+8 ; clean up stack"
"Basic Tags
<html> </html>
Creates an HTML document
<head> </head>
Sets off the title & other info that isn't displayed
<body> </body>
Sets off the visible portion of the document
<title> </title>
Puts name of the document in the title bar; when
bookmarking pages, this is what is bookmarked
Body attributes (only used in email newsletters)
<body bgcolor=?>
Sets background color, using name or hex value
<body text=?>
Sets text color, using name or hex value
<body link=?>
Sets color of links, using name or hex value
<body vlink=?>
Sets color of visited links, using name or hex value
<body alink=?>
Sets color of active links (while mouse-clicking)
Text Tags
<pre> </pre>
Creates preformatted text
<h1> </h1> --> <h6> </h6>
Creates headlines -- H1=largest, H6=smallest
<b> </b>
Creates bold text (should use <strong> instead)
<i> </i>
Creates italicized text (should use <em> instead)
<tt> </tt>
Creates typewriter-style text
<code> </code>
Used to define source code, usually monospace
<cite> </cite>
Creates a citation, usually processed in italics
<address> </address>
Creates address section, usually processed in italics
<em> </em>
Emphasizes a word (usually processed in italics)
<strong> </strong>
Emphasizes a word (usually processed in bold)
<font size=?> </font>
Sets size of font - 1 to 7 (should use CSS instead)
<font color=?> </font>
Sets font color (should use CSS instead)
<font face=?> </font>
Defines the font used (should use CSS instead)
Links
<a href="URL">clickable text</a>
Creates a hyperlink to a Uniform Resource Locator
<a href="mailto:EMAIL_ADDRESS">clickable text</a>
Creates a hyperlink to an email address
<a name="NAME">
Creates a target location within a document
<a href="#NAME">clickable text</a>
Creates a link to that target location
Formatting
<p> </p>
Creates a new paragraph
<br>
AInserts a line break (carriage return)
<blockquote> </blockquote>
Puts content in a quote - indents text from both sides
<div> </div>
Used to format block content with CSS
<span> </span>
Used to format inline content with CSS
Lists
<ul> </ul>
Creates an unordered list
<ol start=?> </ol>
Creates an ordered list (start=xx,
where xx is a counting number)
<li> </li>
Encompasses each list item
<dl> </dl>
Creates a definition list
<dt>
 Precedes eachdefintion term
<dd>
 Precedes eachdefintion
 Graphical elements
<hr>
Inserts a horizontal rule
<hr size=?>
Sets size (height) of horizontal rule
<hr width=?>
Sets width of rule (as a % or absolute pixel length)
<hr noshade>
Creates a horizontal rule without a shadow
<img src="URL" />
Adds image; it is a separate file located at the URL
<img src="URL" align=?>
Aligns image left/right/center/bottom/top/middle (use CSS)
<img src="URL" border=?>
Sets size of border surrounding image (use CSS)
<img src="URL" height=?>
Sets height of image, in pixels
<img src="URL" width=?>
Sets width of image, in pixels
<img src="URL" alt=?>
Sets the alternate text for browsers that can't
process images (required by the ADA)
 HTML Cheatsheet page 2 of 2
Forms
<form> </form>
Defines a form
<select multiple name=? size=?> </select>
Creates a scrolling menu. Size sets the number of
menu items visible before user needs to scroll.
<select name=?> </select>
Creates a pulldown menu
<option>
Sets off each menu item
<textarea name=? cols="x" rows="y"></textarea>
Creates a text box area. Columns set the width;
rows set the height.
<input type="checkbox" name=? value=?>
Creates a checkbox.
<input type="checkbox" name=? value=? checked>
Creates a checkbox which is pre-checked.
<input type="radio" name=? value=?>
Creates a radio button.
<input type="radio" name=? value=? checked>
Creates a radio button which is pre-checked.
<input type="text" name=? size=?>
Creates a one-line text area. Size sets length, in
characters.
<input type="submit" value=?>
Creates a submit button. Value sets the text in the
submit button.
<input type="image" name=? src=? border=? alt=?>
Creates a submit button using an image.
<input type="reset">
Creates a reset button
Tables (use only for data layout - use CSS for page layout) Table attributes (only use for email newsletters)
<table> </table>
Creates a table
<tr> </tr>
Sets off each row in a table
<td> </td>
Sets off each cell in a row
<th> </th>
Sets off the table header (a normal cell with bold,
centered text)
<table border=?>
Sets the width of the border around table cells
<table cellspacing=?>
Sets amount of space between table cells
<table cellpadding=?>
Sets amount of space between a cell's border and
its contents
<table width=?>
Sets width of the table in pixels or as a percentage
<tr align=?>
Sets alignment for cells within the row
(left/center/right)
<td align=?>
Sets alignment for cells (left/center/right)
<tr valign=?>
Sets vertical alignment for cells within the row
(top/middle/bottom)
<td valign=?>
Sets vertical alignment for cell (top/middle/bottom)
<td rowspan=?>
Sets number of rows a cell should span (default=1)
<td colspan=?>
Sets number of columns a cell should span
<td nowrap>
Prevents lines within a cell from being broken to fit
HTML5 input tag attributes
(not all browsers support; visit http://caniuse.com
 for details)
<input type="email" name=?>
 Sets a single-line textbox for email addresses
<input type="url" name=?>
 Sets a single-line textbox for URLs
<input type="number" name=?>
 Sets a single-line textbox for a number
<input type="range" name=?>
 Sets a single-line text box for a range of numbers
<input type="date/month/week/time" name=?>
 Sets a single-line text box with a calendar
 showing the date/month/week/time
<input type="search" name=?>
 Sets a single-line text box for searching
<input type="color" name=?>
 Sets a single-line text box for picking a color"
"In Coding Patterns series, we will try to recognize common patterns underlying behind each algorithm question, using real examples from Leetcode.

Previous posts were about Sliding Window, Two Pointers, Fast & Slow Pointers, Merge Intervals, Cyclic Sort, In-place Reversal of a Linked List, Breadth First Search (BFS), Depth First Search (DFS), Two Heaps, Subsets and Modified Binary Search patterns and today, we will introduce Top K Numbers pattern which is very useful to solve the problems that asks us to find the top / smallest / frequent K elements among a given set.

We are going to use Heap data structure to keep track of K elements.

Problem: K-th Largest ElementPermalink
LeetCode 215 - Kth Largest Element in an Array [medium]

Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3, 2, 1, 5, 6, 4] and k = 2
Output: 5
Example 2:

Input: [3, 2, 3, 1, 2, 4, 5, 5, 6] and k = 4
Output: 4
Note:

You may assume k is always valid, 1 ≤ k ≤ array’s length.

Top K Numbers SolutionPermalink
The best data structure to keep track of top K elements is Heap.

If we iterate through the array one element at a time and keep kth largest element in a heap such that each time we find a larger number than the smallest number in the heap, we do two things:

Take out the smallest number from the heap
Insert the larger number into the heap
This will ensure that we always have top k largest numbers in the heap. We will use a min-heap for this;

from heapq import *


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        min_heap = []
        
        for i in range(k):
            heappush(min_heap, nums[i])
        
        for i in range(k, len(nums)):
            if nums[i] > min_heap[0]:
                heappop(min_heap)
                heappush(min_heap, nums[i])
            
        return min_heap[0]
Time Complexity: O(N log K).

Space Complexity: O(K)

How to identify?Permalink
If the problem asking us to find the top / smallest / frequent K elements among a given set, we need to think about Top K Numbers pattern.

While solving the problems, we are going to use Heap data structure to keep track of K elements."

Creativity:
"early all great ideas follow a similar creative process and this article explains how this process works. Understanding this is important because creative thinking is one of the most useful skills you can possess. Nearly every problem you face in work and in life can benefit from innovative solutions, lateral thinking, and creative ideas.

Anyone can learn to be creative by using these five steps. That's not to say being creative is easy. Uncovering your creative genius requires courage and tons of practice. However, this five-step approach should help demystify the creative process and illuminate the path to more innovative thinking.

To explain how this process works, let me tell you a short story.

A Problem in Need of a Creative Solution
In the 1870s, newspapers and printers faced a very specific and very costly problem. Photography was a new and exciting medium at the time. Readers wanted to see more pictures, but nobody could figure out how to print images quickly and cheaply.

For example, if a newspaper wanted to print an image in the 1870s, they had to commission an engraver to etch a copy of the photograph onto a steel plate by hand. These plates were used to press the image onto the page, but they often broke after just a few uses. This process of photoengraving, you can imagine, was remarkably time consuming and expensive.

The man who invented a solution to this problem was named Frederic Eugene Ives. He went on to become a trailblazer in the field of photography and held over 70 patents by the end of his career. His story of creativity and innovation, which I will share now, is a useful case study for understanding the 5 key steps of the creative process.

A Flash of Insight
Ives got his start as a printer’s apprentice in Ithaca, New York. After two years of learning the ins and outs of the printing process, he began managing the photographic laboratory at nearby Cornell University. He spent the rest of the decade experimenting with new photography techniques and learning about cameras, printers, and optics.

In 1881, Ives had a flash of insight regarding a better printing technique.

“While operating my photostereotype process in Ithaca, I studied the problem of halftone process,” Ives said. “I went to bed one night in a state of brain fog over the problem, and the instant I woke in the morning saw before me, apparently projected on the ceiling, the completely worked out process and equipment in operation.”

Ives quickly translated his vision into reality and patented his printing approach in 1881. He spent the remainder of the decade improving upon it. By 1885, he had developed a simplified process that delivered even better results. The Ives Process, as it came to be known, reduced the cost of printing images by 15x and remained the standard printing technique for the next 80 years.

Alright, now let's discuss what lessons we can learn from Ives about the creative process.

The printing process developed by Frederic Eugene Ives is a great example of the optimal creative process. 
The printing process developed by Frederic Eugene Ives used a method called “halftone printing” to break a photograph down into a series of tiny dots. The image looks like a collection of dots up close, but when viewed from a normal distance the dots blend together to create a picture with varying shades of gray. (Source: Unknown.)
The 5 Stages of the Creative Process
In 1940, an advertising executive named James Webb Young published a short guide titled, A Technique for Producing Ideas. In this guide, he made a simple, but profound statement about generating creative ideas.

According to Young, innovative ideas happen when you develop new combinations of old elements. In other words, creative thinking is not about generating something new from a blank slate, but rather about taking what is already present and combining those bits and pieces in a way that has not been done previously.

Most important, the ability to generate new combinations hinges upon your ability to see the relationships between concepts. If you can form a new link between two old ideas, you have done something creative.

Young believed this process of creative connection always occurred in five steps.

Gather new material. At first, you learn. During this stage you focus on 1) learning specific material directly related to your task and 2) learning general material by becoming fascinated with a wide range of concepts.
Thoroughly work over the materials in your mind. During this stage, you examine what you have learned by looking at the facts from different angles and experimenting with fitting various ideas together.
Step away from the problem. Next, you put the problem completely out of your mind and go do something else that excites you and energizes you.
Let your idea return to you. At some point, but only after you have stopped thinking about it, your idea will come back to you with a flash of insight and renewed energy.
Shape and develop your idea based on feedback. For any idea to succeed, you must release it out into the world, submit it to criticism, and adapt it as needed.
creative-process

The Idea in Practice
The creative process used by Frederic Eugene Ives offers a perfect example of these five steps in action.

First, Ives gathered new material. He spent two years working as a printer's apprentice and then four years running the photographic laboratory at Cornell University. These experiences gave him a lot of material to draw upon and make associations between photography and printing.

Second, Ives began to mentally work over everything he learned. By 1878, Ives was spending nearly all of his time experimenting with new techniques. He was constantly tinkering and experimenting with different ways of putting ideas together.

Third, Ives stepped away from the problem. In this case, he went to sleep for a few hours before his flash of insight. Letting creative challenges sit for longer periods of time can work as well. Regardless of how long you step away, you need to do something that interests you and takes your mind off of the problem.

Fourth, his idea returned to him. Ives awoke with the solution to his problem laid out before him. (On a personal note, I often find creative ideas hit me just as I am lying down for sleep. Once I give my brain permission to stop working for the day, the solution appears easily.)

Finally, Ives continued to revise his idea for years. In fact, he improved so many aspects of the process he filed a second patent. This is a critical point and is often overlooked. It can be easy to fall in love with the initial version of your idea, but great ideas always evolve.

The Creative Process in Short
“An idea is a feat of association, and the height of it is a good metaphor.”
—Robert Frost
The creative process is the act of making new connections between old ideas. Thus, we can say creative thinking is the task of recognizing relationships between concepts.

One way to approach creative challenges is by following the five-step process of 1) gathering material, 2) intensely working over the material in your mind, 3) stepping away from the problem, 4) allowing the idea to come back to you naturally, and 5) testing your idea in the real world and adjusting it based on feedback.

Being creative isn't about being the first (or only) person to think of an idea. More often, creativity is about connecting ideas."

Controlled results:
Training loss = "1.000"
Top K = "Heap"
